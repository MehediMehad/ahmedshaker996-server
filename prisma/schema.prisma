// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  subscription Subscription? // Optional field, SubscriptionId
  name         String
  age          Int
  email        String           @unique
  phone        String?
  image        String?
  password     String
  gender       gender_enum
  address      String?
  role         UserRoleEnum     @default(USER)
  status       user_status_enum @default(in_progress)
  isDelete     Boolean          @default(false)
  isVerified   Boolean          @default(false)
  fcmToken     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("users")
}

model Subscription {
  id               String                   @id @default(auto()) @map("_id") @db.ObjectId
  subscriptedUsers String[]                 @unique @default([]) @db.ObjectId
  userId           String                   @unique @db.ObjectId
  user             User                     @relation(fields: [userId], references: [id])
  plan             PlanEnum
  price            Float
  status           subscription_status_enum
  duration         Int
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  // renewalDate DateTime

  @@map("subscriptions")
}

model Booking {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String              @unique @db.ObjectId
  classId   String              @db.ObjectId
  date      DateTime
  status    booking_status_enum @default(BOOKED)
  createdAt DateTime            @default(now())

  @@map("bookings")
}

model Class {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  instructor  String?         @db.ObjectId // FK
  bookedUsers String[]        @default([]) @db.ObjectId
  title       String
  description String
  price       Float
  coverImage  String?
  type        class_type_enum
  capacity    Int
  available   Boolean         @default(true)
  duration    Int
  startTime   DateTime
  endTime     DateTime
  latitude    Float
  longitude   Float

  @@map("classes")
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  subscription  String        @db.ObjectId // FK
  user          String
  amount        Float
  status        PaymentStatus
  method        PaymentMethod
  transactionId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  hexCode   String   @unique
  otp       String
  expiry    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId // The instructor who will receive the notification
  title     String
  message   String // The message content of the notification
  body      String
  isRead    Boolean  @default(false) // Indicates whether the notification has been read
  createdAt DateTime @default(now()) // Timestamp of when the notification was created 

  isClicked Boolean @default(false) // Indicates whether the notification has been read
  // User      User    @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Terms {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("terms")
}

model Policy {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("policy")
}

// Enum

enum UserRoleEnum {
  SUPER_ADMIN
  PARTNER
  USER
}

enum gender_enum {
  MALE
  FEMALE
  OTHER
}

enum user_status_enum {
  in_progress
  blocked
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum subscription_status_enum {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum booking_type_enum {
  CLASS
  EXAM
}

enum booking_status_enum {
  BOOKED
  CANCELLED
  COMPLETED
}

enum ClassStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

enum class_type_enum {
  Gym
  Fitness
  Wellness
}

enum OtpType {
  LOGIN
  FORGOT_PASSWORD
}

enum PlanEnum {
  STARTER
  ACTIVE
  UNLIMITED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
}
